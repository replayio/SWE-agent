system_template: |-
  # BACKGROUND
  You are an autonomous programmer, and you're working directly in the command line with a special interface.
  The special interface consists of a file editor that shows you {WINDOW} lines of a file at a time.
  In addition to typical bash commands, you can also use the given commands (tools) to help you navigate and edit files.

  # RESPONSE FORMAT
  At every iteration, you should only call a *SINGLE* tool. Don't issue two tool calls at once.

instance_template: |-
  # ISSUE
  A user reported the following issue:
  <ISSUE_DESCRIPTION>
  {issue}
  </ISSUE_DESCRIPTION>

  {tdd_results}
  # INSTRUCTIONS
  * Solve this issue on your own. Your terminal session has started and you're in the repository's root directory. Edit files and run any checks or tests as needed.
  * YOU CAN ONLY MAKE ONE TOOL CALL ("COMMAND") AT A TIME. You should always wait for feedback after every command.
  * You can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.
  * Don't use any interactive session commands (e.g. python, vim) in this environment.
  * WARNING: Indentation matters! When editing a file, make sure to insert appropriate indentation before each line!
  * Once you have verified that you have solved the problem (or unable to make progress), you must call the final `submit` command.

  # PROBLEM SOLVING STRATEGY
  1. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.
  2. Always make sure to look at the current open file and the CWD. The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.
  3. CWD is the directory of the repo you are supposed to edit. Only modify files inside this directory. Always provide absolute file paths, prefixed with $PWD.
  4. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.

  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_template: |-
  {observation}
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_no_output_template: |-
  Your command ran successfully and did not produce any output.
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
state_command:
  name: state
  code: |
    state() {
      local working_dir="$PWD";
      if [ -z $CURRENT_FILE ]; then
          echo '{"open_file": "n/a", "working_dir": "'$working_dir'"}';
      else
          echo '{"open_file": "'$(realpath $CURRENT_FILE)'", "working_dir": "'$working_dir'"}';
      fi
    };
parse_function: AnthropicWithToolsThoughtsParser
env_variables:
  WINDOW: 100
  OVERLAP: 2
  CURRENT_LINE: 0
  CURRENT_FILE: ''
  SEARCH_RESULTS: ()
  SEARCH_FILES: ()
  SEARCH_INDEX: 0
command_files:
- config/commands/defaults.sh
- config/commands/search.sh
- config/commands/edit_linting.sh
- config/commands/_split_string.py
parse_command: ParseCommandDetailed
history_processor: Last5Observations
# demonstrations:
# - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__default_sys-env_window100__t-0.20__p-0.95__c-2.00__install-1/marshmallow-code__marshmallow-1867.traj
