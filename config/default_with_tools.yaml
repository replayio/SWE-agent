system_template: |-
  # BACKGROUND
  * Help solve the issue reported by the user.

instance_template: |-
  # ISSUE
  A user reported the following issue:
  <ISSUE_DESCRIPTION>
  {issue}
  </ISSUE_DESCRIPTION>

  # Command/Tool Instructions
  * YOU CAN ONLY MAKE ONE TOOL CALL ("COMMAND") AT A TIME. You should always wait for feedback after every command.
  * WARNING: Indentation matters! When editing a file, make sure to insert appropriate indentation before each line!
  * If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.
  * When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.
  * Once you have verified that you have solved the problem (or unable to make progress), you must call the final `submit` command.

  # Problem Solving Strategy
  1. Always make sure to look at the current open file and the CWD. The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.
  2. CWD is the directory of the repo you are supposed to edit. Only modify files inside this directory. Always provide absolute file paths, prefixed with $PWD.  
  3. Help diagnose and find the root cause by applying program analysis strategically using a time-travel debugger.
  4. YOU MUST primarily use a slicing algorithm to traverse the dynamic dependency graph, based on previously found evidence. Every step should be based on the existing dynamic slice that you already have access to.

  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_template: |-
  {observation}
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_no_output_template: |-
  Your command ran successfully and did not produce any output.
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
state_command:
  name: state
  code: |
    state() {
      local working_dir="$PWD";
      if [ -z $CURRENT_FILE ]; then
          echo '{"open_file": "n/a", "working_dir": "'$working_dir'"}';
      else
          echo '{"open_file": "'$(realpath $CURRENT_FILE)'", "working_dir": "'$working_dir'"}';
      fi
    };
parse_function: AnthropicWithToolsThoughtsParser
env_variables:
  WINDOW: 100
  OVERLAP: 2
  CURRENT_LINE: 0
  CURRENT_FILE: ''
  SEARCH_RESULTS: ()
  SEARCH_FILES: ()
  SEARCH_INDEX: 0
command_files:
- config/commands/defaults.sh
- config/commands/search.sh
- config/commands/edit_linting.sh
- config/commands/_split_string.py
parse_command: ParseCommandDetailed
history_processor: Last5Observations
# demonstrations:
# - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__default_sys-env_window100__t-0.20__p-0.95__c-2.00__install-1/marshmallow-code__marshmallow-1867.traj
