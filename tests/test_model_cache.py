from __future__ import annotations
import pytest


from anthropic.types import TextBlock, ToolUseBlock, ToolResultBlockParam
from sweagent.agent.model_cache import json_serialize_str, json_deserialize_str, json_deserialize_file, hash_string
from sweagent.agent.model_result import AnthropicModelResult

@pytest.mark.replayio
def test_json_serialize_str():
    assert json_serialize_str(1) == "1"
    assert json_serialize_str("hello") == '"hello"'
    assert json_serialize_str([1, 2, 3]) == "[1, 2, 3]"
    assert json_serialize_str({"a": 1, "b": 2}) == '{"a": 1, "b": 2}'

@pytest.mark.replayio
def test_json_serialize_str_anthropic_types():
    assert json_serialize_str(TextBlock(type="text", text="hello")) == '{"type": "text", "text": "hello"}'
    assert json_serialize_str(ToolUseBlock(type="tool_use", id="123", name="tool", input="input")) == '{"type": "tool_use", "id": "123", "name": "tool", "input": "input"}'
    assert json_serialize_str({ "type": "tool_result", "tool_use_id": "123", "content": [TextBlock(type="text", text="hello")]}) == '{"type": "tool_result", "tool_use_id": "123", "content": [{"type": "text", "text": "hello"}]}'
    assert json_serialize_str(AnthropicModelResult(blocks=[TextBlock(type="text", text="hello")])) == '{"type": "anthropic_model_result", "blocks": [{"type": "text", "text": "hello"}]}'


# this is the history from a local file with hash = b5f404f6b8e2ae3c709c7fbfc05e60b7a56863db4419ddfe0addea7e90bc3221

input = '''
[{"role": "system", "content": "# BACKGROUND\\nYou are an autonomous programmer, and you're working directly in the command line with a special interface.\\nThe special interface consists of a file editor that shows you 100 lines of a file at a time.\\nIn addition to typical bash commands, you can also use the given commands (tools) to help you navigate and edit files.\\n\\n# RESPONSE FORMAT\\nAt every iteration, you should only call a *SINGLE* tool. Don't issue two tool calls at once.\\n\\n## Requirements\\n\\n* You are provided `tdd_*` tools to reproduce the issue with one or more golden tests and also check for regressions.\\n* The output of the last reproduction is always provided to you.\\n* Always start your investigations from the failing test.\\n* When deciding to investigate some part of the code, EXPLAIN CLEARLY why you think that this is the next step to take.\\n* Don't submit until the reproduction command proves your fix.\\n", "agent": "primary"}, {"role": "user", "content": "# ISSUE\\nA user reported the following issue:\\n<ISSUE_DESCRIPTION>\\nAdd secure default SECURE_REFERRER_POLICY / Referrer-policy header\\nDescription\\n\\t\\n#29406 added the ability for the SECURE_REFERRER_POLICY setting to set Referrer-Policy, released in Django 3.0.\\nI propose we change the default for this to \\"same-origin\\" to make Django applications leak less information to third party sites.\\nThe main risk of breakage here would be linked websites breaking, if they depend on verification through the Referer header. This is a pretty fragile technique since it can be spoofed.\\nDocumentation: \\u200bhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\\nThe MDN support grid is out of date: \\u200bhttps://caniuse.com/#search=Referrer-Policy\\n\\n</ISSUE_DESCRIPTION>\\n\\n# ISSUE REPRODUCTION RESULTS<NOTE: These are the results of a test run of tests that reproduce the issue. Start your investigation here./>\\n<ISSUE_REPRODUCTION>\\nRunning tests to reproduce the bug (from /django__django):\\n >./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 -- project_template.test_settings.TestStartProjectSettings.test_middleware_headers\\n\\ntest_middleware_headers (project_template.test_settings.TestStartProjectSettings) ... FAIL\\n\\n======================================================================\\nFAIL: test_middleware_headers (project_template.test_settings.TestStartProjectSettings)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\"/django__django/tests/project_template/test_settings.py\\", line 43, in test_middleware_headers\\n    b'X-Frame-Options: DENY',\\nAssertionError: Lists differ: [b'Co[58 chars]', b'X-Content-Type-Options: nosniff', b'X-Fra[13 chars]ENY'] != [b'Co[58 chars]', b'Referrer-Policy: same-origin', b'X-Conten[46 chars]ENY']\\n\\nFirst differing element 2:\\nb'X-Content-Type-Options: nosniff'\\nb'Referrer-Policy: same-origin'\\n\\nSecond list contains 1 additional elements.\\nFirst extra element 4:\\nb'X-Frame-Options: DENY'\\n\\n  [b'Content-Length: 0',\\n   b'Content-Type: text/html; charset=utf-8',\\n+  b'Referrer-Policy: same-origin',\\n   b'X-Content-Type-Options: nosniff',\\n   b'X-Frame-Options: DENY']\\n\\n----------------------------------------------------------------------\\nRan 1 test in 0.005s\\n\\nFAILED (failures=1)\\nTesting against Django installed in '/django__django/django'\\nImporting application project_template\\nSkipping setup of unused database(s): default, other.\\nSystem check identified no issues (0 silenced).\\n</ISSUE_REPRODUCTION>\\n\\n\\n# INSTRUCTIONS\\n* Solve this issue on your own. Your terminal session has started and you're in the repository's root directory. Edit files and run any checks or tests as needed.\\n* YOU CAN ONLY MAKE ONE TOOL CALL (RUN A COMMAND) AT A TIME. You should always wait for feedback after every command.\\n* Once you have verified that you have solved the problem (or unable to make progress), you must call the final `submit` command.\\n* Don't use any interactive session commands (e.g. python, vim) in this environment.\\n* You can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\\n* WARNING: Indentation matters! When editing a file, make sure to insert appropriate indentation before each line!\\n\\n# PROBLEM SOLVING STRATEGY\\n1. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\\n2. Always make sure to look at the current open file and the CWD. The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.\\n3. CWD is the directory of the repo you are supposed to edit. Only modify files inside this directory. Always provide absolute file paths, prefixed with $PWD.\\n4. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\\n\\n\\n(Open file: n/a)\\n(Current directory: /django__django)\\nbash-$", "agent": "primary", "tdd": true}, {"role": "assistant", "content": [{"type": "text", "text": "To start investigating this issue, I'll first examine the test file that's failing. The error message indicates that the failing test is in the file \\"tests/project_template/test_settings.py\\". Let's open this file and look at the relevant test."}, {"type": "tool_use", "id": "toolu_012meYzV4qR1vJd9LMMXK1kK", "name": "open", "input": {"path": "/django__django/tests/project_template/test_settings.py"}}], "thought": "To start investigating this issue, I'll first examine the test file that's failing. The error message indicates that the failing test is in the file \\"tests/project_template/test_settings.py\\". Let's open this file and look at the relevant test.", "action": "open \\"/django__django/tests/project_template/test_settings.py\\"", "agent": "primary", "tdd": false}, {"role": "user", "content": [{"type": "tool_result", "tool_use_id": "toolu_012meYzV4qR1vJd9LMMXK1kK", "content": "[File: /django__django/tests/project_template/test_settings.py (44 lines total)]\\n1:import os\\n2:import shutil\\n3:import tempfile\\n4:\\n5:from django import conf\\n6:from django.test import SimpleTestCase\\n7:from django.test.utils import extend_sys_path\\n8:\\n9:\\n10:class TestStartProjectSettings(SimpleTestCase):\\n11:    def setUp(self):\\n12:        self.temp_dir = tempfile.TemporaryDirectory()\\n13:        self.addCleanup(self.temp_dir.cleanup)\\n14:        template_settings_py = os.path.join(\\n15:            os.path.dirname(conf.__file__),\\n16:            'project_template',\\n17:            'project_name',\\n18:            'settings.py-tpl',\\n19:        )\\n20:        test_settings_py = os.path.join(self.temp_dir.name, 'test_settings.py')\\n21:        shutil.copyfile(template_settings_py, test_settings_py)\\n22:\\n23:    def test_middleware_headers(self):\\n24:        \\"\\"\\"\\n25:        Ensure headers sent by the default MIDDLEWARE don't inadvertently\\n26:        change. For example, we never want \\"Vary: Cookie\\" to appear in the list\\n27:        since it prevents the caching of responses.\\n28:        \\"\\"\\"\\n29:        with extend_sys_path(self.temp_dir.name):\\n30:            from test_settings import MIDDLEWARE\\n31:\\n32:        with self.settings(\\n33:            MIDDLEWARE=MIDDLEWARE,\\n34:            ROOT_URLCONF='project_template.urls',\\n35:        ):\\n36:            response = self.client.get('/empty/')\\n37:            headers = sorted(response.serialize_headers().split(b'\\\\r\\\\n'))\\n38:            self.assertEqual(headers, [\\n39:                b'Content-Length: 0',\\n40:                b'Content-Type: text/html; charset=utf-8',\\n41:                b'Referrer-Policy: same-origin',\\n42:                b'X-Content-Type-Options: nosniff',\\n43:                b'X-Frame-Options: DENY',\\n44:            ])\\n(Open file: /django__django/tests/project_template/test_settings.py)\\n(Current directory: /django__django)\\nbash-$"}], "agent": "primary", "tdd": false}]
'''.strip()

@pytest.mark.replayio
def test_json_round_trip():
    history = json_deserialize_str(input)
    history_str = json_serialize_str(history)

    assert history_str == input
